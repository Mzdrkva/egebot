import logging
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
API_TOKEN = "8065641616:AAHpIakr9YJk6jYPE4H_lp2CelIrh18ocNI"  # <-- –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –ü—É—Ç—å –∫ JSON —Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏
FACULTIES_FILE = Path(__file__).parent / "faculties.json"

# –í—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠
ALL_SUBJECTS = [
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è",
    "–•–∏–º–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"
]
# ---------------------------------------------

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏:
# user_subjects[user_id] = set([...])
# user_mode[user_id] = "add" | "del" | None
user_subjects: dict[int, set[str]] = {}
user_mode: dict[int, str] = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
with open(FACULTIES_FILE, encoding="utf-8") as f:
    FACULTIES = json.load(f)

# --- –£—Ç–∏–ª–∏—Ç—ã ---

def check_requirements(have: set[str], requirements: list):
    for req in requirements:
        if isinstance(req, list):
            if not any(r in have for r in req):
                return False
        else:
            if req not in have:
                return False
    return True

def main_keyboard() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠", "üéì –£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã")
    return kb

def subjects_keyboard() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subj in ALL_SUBJECTS:
        kb.add(subj)
    kb.add("‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    uid = msg.from_user.id
    user_subjects.setdefault(uid, set())
    user_mode[uid] = None
    await msg.reply(
        "–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∏—Ç—å –ø–æ —Ç–≤–æ–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ï–ì–≠.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard()
    )
    logger.info(f"[{uid}] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, —Ä–µ–∂–∏–º —Å–±—Ä–æ—à–µ–Ω.")

@dp.message_handler(lambda m: m.text == "‚úÖ –°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠")
async def show_subjects(msg: types.Message):
    uid = msg.from_user.id
    have = user_subjects.setdefault(uid, set())
    logger.info(f"[{uid}] –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–µ–¥–º–µ—Ç—ã: {have}")
    if have:
        await msg.reply("–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n" + ", ".join(sorted(have)))
    else:
        await msg.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
    kb.add("‚èπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await msg.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def enter_add_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = "add"
    logger.info(f"[{uid}] –í–æ—à—ë–ª –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    await msg.reply("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n(–∏–ª–∏ ¬´‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª)", reply_markup=subjects_keyboard())

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def enter_del_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = "del"
    logger.info(f"[{uid}] –í–æ—à—ë–ª –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è")
    await msg.reply("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n(–∏–ª–∏ ¬´‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª)", reply_markup=subjects_keyboard())

@dp.message_handler(lambda m: m.text == "‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")
async def stop_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = None
    logger.info(f"[{uid}] –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    await msg.reply("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=main_keyboard())

@dp.message_handler(lambda m: m.from_user.id in user_mode and user_mode[m.from_user.id] in ("add","del"))
async def handle_add_del(msg: types.Message):
    uid = msg.from_user.id
    mode = user_mode.get(uid)
    text = msg.text
    logger.info(f"[{uid}] handle_add_del mode={mode} text={text!r}")

    if text not in ALL_SUBJECTS:
        await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ ¬´‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª.")
        return

    have = user_subjects.setdefault(uid, set())

    if mode == "add":
        have.add(text)
        await msg.reply(f"‚úÖ –î–æ–±–∞–≤–∏–ª: {text}")
        logger.info(f"[{uid}] –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {have}")
    else:  # "del"
        if text in have:
            have.remove(text)
            await msg.reply(f"üóë –£–¥–∞–ª–∏–ª: {text}")
            logger.info(f"[{uid}] –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {have}")
        else:
            await msg.reply(f"‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ ¬´{text}¬ª.")

@dp.message_handler(lambda m: m.text == "‚èπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = None
    logger.info(f"[{uid}] –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await msg.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.message_handler(lambda m: m.text == "üéì –£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã")
async def show_faculties(msg: types.Message):
    uid = msg.from_user.id
    have = user_subjects.setdefault(uid, set())
    logger.info(f"[{uid}] show_faculties with {have}")
    if not have:
        await msg.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –ï–ì–≠.", reply_markup=main_keyboard())
        return

    matches = []
    for item in FACULTIES:
        reqs = item.get("requirements", [])
        if check_requirements(have, reqs):
            matches.append(f"üèõ {item['faculty']} ‚Äî {item['program']}")

    if matches:
        await msg.reply("–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–∞:\n\n" + "\n".join(matches), reply_markup=main_keyboard())
    else:
        await msg.reply("–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.", reply_markup=main_keyboard())

# --- –ó–∞–ø—É—Å–∫ ---

async def on_startup(dp: Dispatcher):
    await bot.delete_webhook()
    logger.info("Webhook deleted; starting polling.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

import logging
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
API_TOKEN = "8065641616:AAHpIakr9YJk6jYPE4H_lp2CelIrh18ocNI"  # <-- –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –ü—É—Ç—å –∫ JSON —Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏
FACULTIES_FILE = Path(__file__).parent / "faculties.json"

# –í—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠
ALL_SUBJECTS = [
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è",
    "–•–∏–º–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"
]
# ---------------------------------------------

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ: user_id ‚Üí set –ø—Ä–µ–¥–º–µ—Ç–æ–≤, user_id ‚Üí —Ä–µ–∂–∏–º ("add", "del", None)
user_subjects: dict[int, set[str]] = {}
user_mode: dict[int, str] = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–∑ JSON
with open(FACULTIES_FILE, encoding="utf-8") as f:
    FACULTIES = json.load(f)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def check_requirements(have: set[str], requirements: list):
    for req in requirements:
        if isinstance(req, list):
            if not any(r in have for r in req):
                return False
        else:
            if req not in have:
                return False
    return True

def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠", "üéì –£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã")
    return kb

def subjects_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subj in ALL_SUBJECTS:
        kb.add(subj)
    kb.add("‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    uid = msg.from_user.id
    user_subjects.setdefault(uid, set())
    user_mode[uid] = None

    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    instruction = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1) –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.\n"
        "2) –í —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª.\n"
        "3) –ù–∞–∂–º–∏—Ç–µ ¬´üéì –£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.\n"
    )
    await msg.answer(instruction)

    # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    logger.info(f"[{uid}] /start ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@dp.message_handler(lambda m: m.text == "‚úÖ –°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠")
async def show_subjects(msg: types.Message):
    uid = msg.from_user.id
    have = user_subjects.setdefault(uid, set())
    if have:
        await msg.reply("–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n" + ", ".join(sorted(have)))
    else:
        await msg.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
    kb.add("‚èπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await msg.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)
    logger.info(f"[{uid}] –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {have}")

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def enter_add_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = "add"
    await msg.reply("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ ¬´‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª):", reply_markup=subjects_keyboard())
    logger.info(f"[{uid}] –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def enter_del_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = "del"
    await msg.reply("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ ¬´‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª):", reply_markup=subjects_keyboard())
    logger.info(f"[{uid}] –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@dp.message_handler(lambda m: m.text == "‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")
async def stop_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = None
    await msg.reply("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=main_keyboard())
    logger.info(f"[{uid}] –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω")

@dp.message_handler(lambda m: m.from_user.id in user_mode and user_mode[m.from_user.id] in ("add","del"))
async def handle_add_del(msg: types.Message):
    uid = msg.from_user.id
    mode = user_mode[uid]
    subj = msg.text

    if subj not in ALL_SUBJECTS:
        await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ ¬´‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª.")
        return

    have = user_subjects.setdefault(uid, set())
    if mode == "add":
        have.add(subj)
        await msg.reply(f"‚úÖ –î–æ–±–∞–≤–∏–ª: {subj}")
        logger.info(f"[{uid}] –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {subj}")
    else:
        if subj in have:
            have.remove(subj)
            await msg.reply(f"üóë –£–¥–∞–ª–∏–ª: {subj}")
            logger.info(f"[{uid}] –£–¥–∞–ª—ë–Ω –ø—Ä–µ–¥–º–µ—Ç: {subj}")
        else:
            await msg.reply(f"‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ ¬´{subj}¬ª.")

@dp.message_handler(lambda m: m.text == "‚èπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = None
    await msg.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    logger.info(f"[{uid}] –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")

@dp.message_handler(lambda m: m.text == "üéì –£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã")
async def show_faculties(msg: types.Message):
    uid = msg.from_user.id
    have = user_subjects.setdefault(uid, set())
    if not have:
        await msg.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –ï–ì–≠.", reply_markup=main_keyboard())
        return

    matches = []
    for item in FACULTIES:
        reqs = item.get("requirements", [])
        if check_requirements(have, reqs):
            matches.append(f"üèõ {item['faculty']} ‚Äî {item['program']}")

    if matches:
        await msg.reply("–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–∞:\n\n" + "\n".join(matches), reply_markup=main_keyboard())
    else:
        await msg.reply("–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.", reply_markup=main_keyboard())
    logger.info(f"[{uid}] –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {len(matches)}")

# --- –ó–∞–ø—É—Å–∫ polling —Å —É–¥–∞–ª–µ–Ω–∏–µ–º webhook ---

async def on_startup(dp: Dispatcher):
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º polling")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

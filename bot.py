import logging
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
API_TOKEN = "8065641616:AAHpIakr9YJk6jYPE4H_lp2CelIrh18ocNI"  # <-- –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
FACULTIES_FILE = Path(__file__).parent / "faculties.json"
ALL_SUBJECTS = [
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è",
    "–•–∏–º–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"
]
# ---------------------------------------------

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –í –ø–∞–º—è—Ç–∏: user_id ‚Üí set –ø—Ä–µ–¥–º–µ—Ç–æ–≤, user_id ‚Üí —Ä–µ–∂–∏–º ("add","del",None)
user_subjects: dict[int, set[str]] = {}
user_mode: dict[int, str] = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–∑ JSON
with open(FACULTIES_FILE, encoding="utf-8") as f:
    FACULTIES = json.load(f)

# --- –£—Ç–∏–ª–∏—Ç—ã ---

def check_requirements(have: set[str], requirements: list) -> bool:
    for req in requirements:
        if isinstance(req, list):
            if not any(r in have for r in req):
                return False
        else:
            if req not in have:
                return False
    return True

def main_keyboard() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–æ–∏ –ï–ì–≠", "–ú–æ–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã")
    return kb

def subjects_keyboard(subjects: list[str]) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subj in subjects:
        kb.add(subj)
    kb.add("‚èπÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    uid = msg.from_user.id
    subjects = user_subjects.setdefault(uid, set())
    subjects.add("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    user_mode[uid] = None

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    await msg.answer(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –ú–ì–£.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∏—Ç—å."
    )
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    await msg.answer(
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
        "1) –ù–∞–∂–º–∏ ¬´–ú–æ–∏ –ï–ì–≠¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠.\n"
        "2) –í —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –Ω–∞–∂–º–∏ ¬´‚èπÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª.\n"
        "3) –ù–∞–∂–º–∏ ¬´–ú–æ–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã¬ª ‚Äî –∏ —è –ø–æ–∫–∞–∂—É —Å–ø–∏—Å–æ–∫, –∫—É–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã!"
    )
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    logger.info(f"[{uid}] /start ‚Äî –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")

@dp.message_handler(lambda m: m.text == "–ú–æ–∏ –ï–ì–≠")
async def show_subjects(msg: types.Message):
    uid = msg.from_user.id
    have = user_subjects.setdefault(uid, set())
    if have:
        await msg.reply("–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n" + ", ".join(sorted(have)))
    else:
        await msg.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
    kb.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await msg.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)
    logger.info(f"[{uid}] –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {have}")

@dp.message_handler(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def enter_add_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = "add"
    await msg.reply(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=subjects_keyboard(ALL_SUBJECTS)
    )
    logger.info(f"[{uid}] –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@dp.message_handler(lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def enter_del_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = "del"
    have = user_subjects.get(uid, set())
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –≤—Å–µ, –∫—Ä–æ–º–µ –†—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    to_delete = sorted(have - {"–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"})
    if not to_delete:
        await msg.reply(
            "–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å (–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).",
            reply_markup=main_keyboard()
        )
        return
    await msg.reply(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=subjects_keyboard(to_delete)
    )
    logger.info(f"[{uid}] –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@dp.message_handler(lambda m: m.text == "‚èπÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")
async def stop_mode(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = None
    await msg.reply("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=main_keyboard())
    logger.info(f"[{uid}] –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω")

@dp.message_handler(lambda m: m.from_user.id in user_mode and user_mode[m.from_user.id] in ("add", "del"))
async def handle_add_del(msg: types.Message):
    uid = msg.from_user.id
    mode = user_mode[uid]
    subj = msg.text
    have = user_subjects.setdefault(uid, set())

    if mode == "add":
        if subj not in ALL_SUBJECTS:
            await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ ¬´‚èπÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å¬ª.")
            return
        have.add(subj)
        await msg.reply(f"‚úÖ –î–æ–±–∞–≤–∏–ª: {subj}")
        logger.info(f"[{uid}] –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {subj}")
    else:
        if subj not in have or subj == "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫":
            await msg.reply("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.")
            return
        have.remove(subj)
        await msg.reply(f"üóë –£–¥–∞–ª–∏–ª: {subj}")
        logger.info(f"[{uid}] –£–¥–∞–ª—ë–Ω –ø—Ä–µ–¥–º–µ—Ç: {subj}")

@dp.message_handler(lambda m: m.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(msg: types.Message):
    uid = msg.from_user.id
    user_mode[uid] = None
    await msg.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    logger.info(f"[{uid}] –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")

@dp.message_handler(lambda m: m.text == "–ú–æ–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã")
async def show_faculties(msg: types.Message):
    uid = msg.from_user.id
    have = user_subjects.setdefault(uid, set())
    if not have:
        await msg.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –ï–ì–≠.", reply_markup=main_keyboard())
        return

    matches = [
        f"{item['faculty']} ‚Äî {item['program']}"
        for item in FACULTIES
        if check_requirements(have, item.get("requirements", []))
    ]

    if matches:
        await msg.reply("\n\n".join(matches), reply_markup=main_keyboard())
    else:
        await msg.reply("–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.", reply_markup=main_keyboard())
    logger.info(f"[{uid}] –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {len(matches)}")

# --- –ó–∞–ø—É—Å–∫ polling —Å —É–¥–∞–ª–µ–Ω–∏–µ–º webhook –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º ---

async def on_startup(dp):
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º polling")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

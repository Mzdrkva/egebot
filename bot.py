import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = 'YOUR_TOKEN_HERE'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
EGE_SUBJECTS = ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞']

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö: user_id -> —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
user_ege = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠"), KeyboardButton("–£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —è –º–æ–≥—É –ø–æ—Å—Ç—É–ø–∏—Ç—å"))

# –ö–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ï–ì–≠
ege_kb = ReplyKeyboardMarkup(resize_keyboard=True)
ege_kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"))
ege_kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫—É–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∏—Ç—å –ø–æ –ï–ì–≠", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "–°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠")
async def show_ege(message: types.Message):
    user_id = message.from_user.id
    subjects = user_ege.get(user_id, [])
    if subjects:
        await message.answer(f"–¢—ã –¥–æ–±–∞–≤–∏–ª: {', '.join(subjects)}", reply_markup=ege_kb)
    else:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.", reply_markup=ege_kb)

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def add_subjects(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for subj in EGE_SUBJECTS:
        markup.add(KeyboardButton(subj))
    markup.add(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠:", reply_markup=markup)

@dp.message_handler(lambda m: m.text in EGE_SUBJECTS)
async def save_subject(message: types.Message):
    user_id = message.from_user.id
    user_ege.setdefault(user_id, [])
    if message.text not in user_ege[user_id]:
        user_ege[user_id].append(message.text)
        await message.answer(f"{message.text} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"{message.text} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")

@dp.message_handler(lambda m: m.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def done_adding(message: types.Message):
    await message.answer("–ì–æ—Ç–æ–≤–æ! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –ï–ì–≠.", reply_markup=ege_kb)

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def delete_subjects(message: types.Message):
    user_id = message.from_user.id
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for subj in user_ege.get(user_id, []):
        markup.add(KeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {subj}"))
    markup.add(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@dp.message_handler(lambda m: m.text.startswith("–£–¥–∞–ª–∏—Ç—å "))
async def remove_subject(message: types.Message):
    user_id = message.from_user.id
    subject = message.text.replace("–£–¥–∞–ª–∏—Ç—å ", "")
    if subject in user_ege.get(user_id, []):
        user_ege[user_id].remove(subject)
        await message.answer(f"{subject} —É–¥–∞–ª—ë–Ω.")

@dp.message_handler(lambda m: m.text == "–£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —è –º–æ–≥—É –ø–æ—Å—Ç—É–ø–∏—Ç—å")
async def show_faculties(message: types.Message):
    user_id = message.from_user.id
    subjects = set(user_ege.get(user_id, []))
    if not subjects:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –ï–ì–≠.")
        return

    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–∑ PDF)
    example_faculties = {
        "–§–∏–∑—Ñ–∞–∫": {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"},
        "–§–∏–ª—Ñ–∞–∫": {"–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ò—Å—Ç–æ—Ä–∏—è"},
        "–≠–∫–æ–Ω": {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"}
    }

    result = []
    for name, required in example_faculties.items():
        if required.issubset(subjects):
            result.append(name)

    if result:
        await message.answer("–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–∞:\n" + "\n".join(result))
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã.")

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)

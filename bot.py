import json
from pathlib import Path
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# =====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
# =====================

BOT_TOKEN = '8065641616:AAHpIakr9YJk6jYPE4H_lp2CelIrh18ocNI'  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# =====================
# –î–∞–Ω–Ω—ã–µ –ï–ì–≠ –∏ —Ñ–∞—Å—É–ª—å—Ç–µ—Ç–æ–≤
# =====================

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
EGE_SUBJECTS = [
    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
    '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ',
    '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id -> —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
user_ege = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ JSON
FACULTIES_FILE = Path(__file__).parent / "faculties.json"
with open(FACULTIES_FILE, "r", encoding="utf-8") as f:
    FACULTIES = json.load(f)
    # FACULTIES ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π:
    # { "faculty": "...", "program": "...", "subjects": ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", ...] }

# =====================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =====================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠"), KeyboardButton("–£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —è –º–æ–≥—É –ø–æ—Å—Ç—É–ø–∏—Ç—å"))

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ï–ì–≠
ege_kb = ReplyKeyboardMarkup(resize_keyboard=True)
ege_kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"))
ege_kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

# =====================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =====================

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫—É–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∏—Ç—å –ø–æ –ï–ì–≠.",
        reply_markup=main_kb
    )

@dp.message_handler(lambda m: m.text == "–°–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠")
async def show_ege(message: types.Message):
    user_id = message.from_user.id
    subjects = user_ege.get(user_id, [])
    if subjects:
        await message.answer(f"–¢—ã –¥–æ–±–∞–≤–∏–ª: {', '.join(subjects)}", reply_markup=ege_kb)
    else:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.", reply_markup=ege_kb)

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def add_subjects(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for subj in EGE_SUBJECTS:
        markup.insert(KeyboardButton(subj))
    markup.add(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠ (–Ω–∞–∂–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=markup)

@dp.message_handler(lambda m: m.text in EGE_SUBJECTS)
async def save_subject(message: types.Message):
    user_id = message.from_user.id
    user_ege.setdefault(user_id, [])
    if message.text not in user_ege[user_id]:
        user_ege[user_id].append(message.text)
        await message.answer(f"{message.text} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"{message.text} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

@dp.message_handler(lambda m: m.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def done_adding(message: types.Message):
    await message.answer("–û–ö, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –ï–ì–≠.", reply_markup=ege_kb)

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
async def delete_subjects(message: types.Message):
    user_id = message.from_user.id
    current = user_ege.get(user_id, [])
    if not current:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=ege_kb)
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for subj in current:
        markup.insert(KeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {subj}"))
    markup.add(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@dp.message_handler(lambda m: m.text.startswith("–£–¥–∞–ª–∏—Ç—å "))
async def remove_subject(message: types.Message):
    user_id = message.from_user.id
    subject = message.text.replace("–£–¥–∞–ª–∏—Ç—å ", "")
    if subject in user_ege.get(user_id, []):
        user_ege[user_id].remove(subject)
        await message.answer(f"{subject} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å ‚Äî –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")

@dp.message_handler(lambda m: m.text == "–£–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —è –º–æ–≥—É –ø–æ—Å—Ç—É–ø–∏—Ç—å")
async def show_faculties(message: types.Message):
    user_id = message.from_user.id
    user_subjects = set(user_ege.get(user_id, []))
    if not user_subjects:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –ï–ì–≠.", reply_markup=main_kb)
        return

    matches = []
    for item in FACULTIES:
        required = set(item["subjects"])
        if required.issubset(user_subjects):
            matches.append(f"üèõ {item['faculty']} ‚Äî {item['program']}")

    if matches:
        await message.answer("–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–∞:\n\n" + "\n".join(matches), reply_markup=main_kb)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã.", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

# =====================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =====================

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
